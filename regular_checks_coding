GENERAL:
 - Header order and placement
	- Each header file at lowest possible level
 - Newlines
	- Header levels
	- Class declaration (public, private, protected)
	- Between function return and name in .cpp
	- In code
 - No unnecessary comments
 - No unused functions and arguments
 - Spaces
	- Between operators
	- After comma

ENUMS:
 - Use enum classes

VECTORS:
 - push_back vs emplace_back
 - assign

LOOPS:
 - for_each > iterators > index > while
 - Pass by reference, not by value

VARIABLES/OBJECTS:
 - Const
 - Type occurs only once per operation (use auto if needed)
 - Related data organized into structs
 - Use of type auto:
	- Readability
	- Enforces typename used only once in expr
	- E.g. useful for make_shared, new, in loop, ...
	- Only use when type is clear to user!!

FUNCTIONS:
 - In namespace
	- Otherwise you do not know what it does; maybe another function with same name included somewhere
 - Pass by reference or std::move
	- Exception: basic types

NAMING:
 - CamelCase / snake_case
 - Member variables end in underscore
 - Reflects what it does/is
	- Reader should be able to see what program does at a simple glance
 - Reflects units if not SI
 - Length +/- proportional to lifetime (if possible)

CLASSES:
 - Use classes if invariants (otherwise structs)
 	- Invariant: set of assertions that hold true during object lifetime
	  e.g.: Date has format constraints.
 - Member functions only if work directly with class data (the rest van be helpers)
 - Constructor & destructor: 
	- Check for brace-initialization
	- Check for default
 - Check for functions
 - Check for static
 - Check for virtual & final
 - Friend vs static:
	- friend: can get internals of class
	- static: can get internals of class + in class scope
 - Use of singleton design pattern --> logging, ...

DESIGN:
 - Avoid magic numbers and strings, ... --> CONFIGURABLE
 - Config hierarchies: generic and special files
 - DNRY

ROS:
 - Config loaded into parameter server - use when you can
 - Nodelets > nodes when possible
 - No header <ros/ros.h> --> be more precise
 - Msg -> only when necessary

EIGEN LIBRARY:
 - use of EIGEN macros in class and struct definitions

